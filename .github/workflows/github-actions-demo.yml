# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  #this was used as an example https://coderefinery.github.io/testing/continuous-integration/
  test:
   runs-on: ubuntu-latest
   steps:
          - uses: actions/checkout@v2
          - name: Python install
            uses: actions/setup-python@v2
            with:
              python-version: 3.8
          - name: Dependencies check+installation if needed
            run: |
              python -m pip install --upgrade pip
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


#https://github.com/snok/install-poetry/issues/43 helped me
          - name: Setting up Poetry
            uses: snok/install-poetry@v1
            with:
                version: 1.1.6
                virtualenvs-create: true
                virtualenvs-in-project: true

          - name: Loading cached venv
            id: cached-poetry-dependencies
            uses: actions/cache@v2
            with:
                path: .venv
                key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

          - name: Installing poetry dependencies
            if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
            run: |
                    poetry install
                    poetry run mypy --config-file pyproject.toml ./
                    poetry run mypy --install-types --non-interactive ./

          - name: Test with pytest&poetry
            run: |
              poetry run pytest app_python/manage.py

  build-and-push:
    runs-on: ubuntu-latest
    steps:

      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  ${{ secrets.DOCKER_HUB_USERNAME }}/simplewhale:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      
